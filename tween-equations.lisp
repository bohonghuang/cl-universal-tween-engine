(in-package #:universal-tween-engine)

(defconstant +tween-equation-back-param-s+ 1.70158)

(declaim (ftype (function (f32) (values f32)) tween-equation-back-in))
(defun tween-equation-back-in (x)
  (declare (type f32 x))
  (let ((s +tween-equation-back-param-s+))
    (* x x (- (* (+ s 1.0) x) s))))

(declaim (ftype (function (f32) (values f32)) tween-equation-back-out))
(defun tween-equation-back-out (x)
  (declare (type f32 x))
  (let ((s +tween-equation-back-param-s+))
    (+ (* (decf x 1.0) x (+ (* (+ s 1.0) x) s)) 1.0)))

(define-modify-macro mulf (&optional (delta 2)) *)

(declaim (ftype (function (f32) (values f32)) tween-equation-back-inout))
(defun tween-equation-back-inout (x)
  (declare (type f32 x))
  (let ((s +tween-equation-back-param-s+))
    (if (< (mulf x 2.0) 1)
        (* 0.5 (* x x (- (* (+ (mulf s 1.525) 1.0) x) s)))
        (* 0.5 (+ (* (decf x 2.0) x (+ (* (+ (mulf s 1.525) 1.0) x) s)) 2)))))

(declaim (ftype (function (f32) (values f32)) tween-equation-bounce-out))
(defun tween-equation-bounce-out (x)
  (declare (type f32 x))
  (cond
    ((< x (/ 1 2.75)) (* 7.5625 x x))
    ((< x (/ 2 2.75)) (+ (* 7.5625 (decf x (/ 1.5 2.75)) x) 0.75))
    ((< x (/ 2.5 2.75)) (+ (* 7.5625 (decf x (/ 2.25 2.75)) x) 0.9375))
    (t (+ (* 7.5625 (decf x (/ 2.625 2.75)) x) 0.984375))))

(declaim (ftype (function (f32) (values f32)) tween-equation-bounce-in))
(defun tween-equation-bounce-in (x)
  (declare (type f32 x))
  (- 1.0 (tween-equation-bounce-out (- 1.0 x))))

(declaim (ftype (function (f32) (values f32)) tween-equation-bounce-inout))
(defun tween-equation-bounce-inout (x)
  (declare (type f32 x))
  (if (< x 0.5)
      (* (tween-equation-bounce-in (* x 2.0)) 0.5)
      (+ (* (tween-equation-bounce-out (- (* x 2.0) 1.0)) 0.5) 0.5)))

(declaim (ftype (function (f32) (values f32)) tween-equation-circ-in))
(defun tween-equation-circ-in (x)
  (declare (type f32 x))
  (- (- (the f32 (sqrt (- 1.0 (* x x))))) 1.0))

(declaim (ftype (function (f32) (values f32)) tween-equation-circ-out))
(defun tween-equation-circ-out (x)
  (declare (type f32 x))
  (sqrt (- 1.0 (* (decf x 1.0) x))))

(declaim (ftype (function (f32) (values f32)) tween-equation-circ-inout))
(defun tween-equation-circ-inout (x)
  (declare (type f32 x))
  (if (< (mulf x 2.0) 1)
      (* (- 0.5) (- (the f32 (sqrt (- 1.0 (* x x)))) 1.0))
      (* 0.5 (+ (the f32 (sqrt (- 1.0 (* (decf x 2.0) x)))) 1.0))))

(declaim (ftype (function (f32) (values f32)) tween-equation-cubic-in))
(defun tween-equation-cubic-in (x)
  (declare (type f32 x))
  (* x x x))

(declaim (ftype (function (f32) (values f32)) tween-equation-cubic-out))
(defun tween-equation-cubic-out (x)
  (declare (type f32 x))
  (+ (* (decf x 1.0) x x) 1.0))

(declaim (ftype (function (f32) (values f32)) tween-equation-cubic-inout))
(defun tween-equation-cubic-inout (x)
  (declare (type f32 x))
  (if (< (mulf x 2.0) 1.0)
      (* 0.5 x x x)
      (* 0.5 (+ (* (decf x 2.0) x x) 2.0))))

(defconstant +pi+ (coerce pi 'f32))

(defconstant +tween-equation-elastic-param-a+ 0.0)
(defconstant +tween-equation-elastic-param-b+ 0.0)
(defconstant +tween-equation-elastic-set-a-p+ nil)
(defconstant +tween-equation-elastic-set-p-p+ nil)

(declaim (ftype (function (f32) (values f32)) tween-equation-elastic-in))
(defun tween-equation-elastic-in (x)
  (declare (type f32 x))
  (let ((a +tween-equation-elastic-param-a+)
        (p +tween-equation-elastic-param-b+))
    (declare (type f32 a p))
    (cond
      ((= x 0.0) (return-from tween-equation-elastic-in 0.0))
      ((= x 1.0) (return-from tween-equation-elastic-in 1.0))
      ((not +tween-equation-elastic-set-p-p+) (setf p 0.3)))
    (let ((s 0.0))
      (declare (type f32 s))
      (if (or (not +tween-equation-elastic-set-a-p+) (< a 1.0))
          (setf a 1.0 s (/ p 4.0))
          (setf s (* (/ p (* 2.0 +pi+)) (asin (/ 1.0 a)))))
      (- (* a (expt 2.0 (* 10.0 (decf x 1.0))) (sin (/ (* (- x s) (* 2 +pi+)) p)))))))

(declaim (ftype (function (f32) (values f32)) tween-equation-elastic-out))
(defun tween-equation-elastic-out (x)
  (declare (type f32 x))
  (let ((a +tween-equation-elastic-param-a+)
        (p +tween-equation-elastic-param-b+))
    (declare (type f32 a p))
    (cond
      ((= x 0.0) (return-from tween-equation-elastic-out 0.0))
      ((= x 1.0) (return-from tween-equation-elastic-out 1.0))
      ((not +tween-equation-elastic-set-p-p+) (setf p 0.3)))
    (let ((s 0.0))
      (declare (type f32 s))
      (if (or (not +tween-equation-elastic-set-a-p+) (< a 1.0))
          (setf a 1.0 s (/ p 4.0))
          (setf s (* (/ p (* 2.0 +pi+)) (asin (/ 1.0 a)))))
      (+ (* a (expt 2.0 (* -10.0 x)) (sin (/ (* (- x s) (* 2 +pi+)) p))) 1.0))))

(declaim (ftype (function (f32) (values f32)) tween-equation-elastic-inout))
(defun tween-equation-elastic-inout (x)
  (declare (type f32 x))
  (let ((a +tween-equation-elastic-param-a+)
        (p +tween-equation-elastic-param-b+))
    (cond
      ((= x 0.0) (return-from tween-equation-elastic-inout 0.0))
      ((= (mulf x 2.0) 2.0) (return-from tween-equation-elastic-inout 1.0))
      ((not +tween-equation-elastic-set-p-p+) (setf p (* 0.3 1.5))))
    (let ((s 0.0))
      (declare (type f32 s))
      (if (or (not +tween-equation-elastic-set-a-p+) (< a 1.0))
          (setf a 1.0 s (/ p 4.0))
          (setf s (* (/ p (* 2.0 +pi+)) (asin (/ 1.0 a)))))
      (if (< x 1.0)
          (* -0.5 a (expt 2.0 (* 10.0 (decf x 1.0))) (sin (/ (* (- x s) (* 2 +pi+)) p)))
          (+ (* 0.5 a (expt 2.0 (* -10.0 (decf x 1.0))) (sin (/ (* (- x s) (* 2 +pi+)) p))) 1.0)))))

(declaim (ftype (function (f32) (values f32)) tween-equation-expo-in))
(defun tween-equation-expo-in (x)
  (declare (type f32 x))
  (if (= x 0.0) 0.0
      (expt 2.0 (* 10.0 (- x 1.0)))))

(declaim (ftype (function (f32) (values f32)) tween-equation-expo-out))
(defun tween-equation-expo-out (x)
  (declare (type f32 x))
  (if (= x 1.0) 1.0 (+ (- (expt 2.0 (* -10.0 x))) 1.0)))

(declaim (ftype (function (f32) (values f32)) tween-equation-expo-inout))
(defun tween-equation-expo-inout (x)
  (declare (type f32 x))
  (cond
    ((= x 0.0) 0.0)
    ((= x 1.0) 1.0)
    ((< (mulf x 2.0) 1.0) (* 0.5 (expt 2.0 (* 10.0 (- x 1.0)))))
    (t (* 0.5 (+ (- (expt 2.0 (* -10.0 (decf x 1.0)))) 2.0)))))

(declaim (ftype (function (f32) (values f32)) tween-equation-linear-inout))
(defun tween-equation-linear-inout (x)
  (declare (type f32 x))
  (values x))

(declaim (ftype (function (f32) (values f32)) tween-equation-quad-in))
(defun tween-equation-quad-in (x)
  (declare (type f32 x))
  (* x x))

(declaim (ftype (function (f32) (values f32)) tween-equation-quad-out))
(defun tween-equation-quad-out (x)
  (declare (type f32 x))
  (* (- x) (- x 2.0)))

(declaim (ftype (function (f32) (values f32)) tween-equation-quad-inout))
(defun tween-equation-quad-inout (x)
  (declare (type f32 x))
  (if (< (mulf x 2.0) 1.0)
      (* 0.5 x x)
      (* -0.5 (- (* (decf x 1.0) (- x 2.0)) 1.0))))

(declaim (ftype (function (f32) (values f32)) tween-equation-quart-in))
(defun tween-equation-quart-in (x)
  (declare (type f32 x))
  (* x x x x))

(declaim (ftype (function (f32) (values f32)) tween-equation-quart-out))
(defun tween-equation-quart-out (x)
  (declare (type f32 x))
  (- 1.0 (* (decf x 1.0) x x x)))

(declaim (ftype (function (f32) (values f32)) tween-equation-quart-inout))
(defun tween-equation-quart-inout (x)
  (declare (type f32 x))
  (if (< (mulf x 2.0) 1.0)
      (* 0.5 x x x x)
      (* -0.5 (- (* (decf x 2.0) x x x) 2.0))))

(declaim (ftype (function (f32) (values f32)) tween-equation-quint-in))
(defun tween-equation-quint-in (x)
  (declare (type f32 x))
  (* x x x x x))

(declaim (ftype (function (f32) (values f32)) tween-equation-quint-out))
(defun tween-equation-quint-out (x)
  (declare (type f32 x))
  (+ (* (decf x 1.0) x x x x) 1.0))

(declaim (ftype (function (f32) (values f32)) tween-equation-quint-inout))
(defun tween-equation-quint-inout (x)
  (declare (type f32 x))
  (if (< (mulf x 2.0) 1.0)
      (* 0.5 x x x x x)
      (* 0.5 (+ (* (decf x 2.0) x x x x) 2.0))))

(declaim (ftype (function (f32) (values f32)) tween-equation-sine-in))
(defun tween-equation-sine-in (x)
  (declare (type f32 x))
  (- 1.0 (cos (* x (/ +pi+ 2)))))

(declaim (ftype (function (f32) (values f32)) tween-equation-sine-out))
(defun tween-equation-sine-out (x)
  (declare (type f32 x))
  (sin (* x (/ +pi+ 2))))

(declaim (ftype (function (f32) (values f32)) tween-equation-sine-inout))
(defun tween-equation-sine-inout (x)
  (declare (type f32 x))
  (* -0.5 (- (cos (* +pi+ x)) 1.0)))
